#pragma once
#include "Spell.h"
#include "Globals.h"
#include "Projectile.h"
#include <stdlib.h>

class BouncingCurve : public Spell {
public:
	BouncingCurve() {};
	void Cast(int px, int py, int ex, int ey) override {
		for (int i = 0; i < 10; i++) {
			Globals::projectiles->push_back(new Projectile(ex, ey, 16, 16, Globals::sprites->at(1), std::vector<Direction*> {new Direction(3.5-i/10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, 20, -0.0525), new Direction(3.5 - i / 10.0, 4.25, -1, -0.0525)}));
			Globals::projectiles->push_back(new Projectile(ex, ey, 16, 16, Globals::sprites->at(1), std::vector<Direction*> {new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, 20, 0.0525), new Direction(1.5 - i / 10.0, 4.25, -1, 0.0525)}));
		}
	}
};
